// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Calculator renders correctly Renders Calculator Correctly 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="container"
      >
        <h1>
          Simple Calculator
        </h1>
        <div
          class="display"
        >
          <span />
          <span />
          <span />
        </div>
        <div>
          <button
            type="button"
            value="AC"
          >
            AC
          </button>
          <button
            type="button"
            value="+/-"
          >
            +/-
          </button>
          <button
            type="button"
            value="%"
          >
            %
          </button>
          <button
            class="orange"
            type="button"
            value="/"
          >
             รท
          </button>
        </div>
        <div>
          <button
            type="button"
            value="7"
          >
            7
          </button>
          <button
            type="button"
            value="8"
          >
            8
          </button>
          <button
            type="button"
            value="9"
          >
            9
          </button>
          <button
            class="orange"
            type="button"
            value="*"
          >
            x
          </button>
        </div>
        <div>
          <button
            type="button"
            value="4"
          >
            4
          </button>
          <button
            type="button"
            value="5"
          >
            5
          </button>
          <button
            type="button"
            value="6"
          >
            6
          </button>
          <button
            class="orange"
            type="button"
            value="-"
          >
            -
          </button>
        </div>
        <div>
          <button
            type="button"
            value="1"
          >
            1
          </button>
          <button
            type="button"
            value="2"
          >
            2
          </button>
          <button
            type="button"
            value="3"
          >
            3
          </button>
          <button
            class="orange"
            type="button"
            value="+"
          >
            +
          </button>
        </div>
        <div>
          <button
            class="wide-button"
            type="button"
            value="0"
          >
            0
          </button>
          <button
            type="button"
            value="."
          >
            .
          </button>
          <button
            class="orange"
            type="button"
            value="="
          >
            =
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="container"
    >
      <h1>
        Simple Calculator
      </h1>
      <div
        class="display"
      >
        <span />
        <span />
        <span />
      </div>
      <div>
        <button
          type="button"
          value="AC"
        >
          AC
        </button>
        <button
          type="button"
          value="+/-"
        >
          +/-
        </button>
        <button
          type="button"
          value="%"
        >
          %
        </button>
        <button
          class="orange"
          type="button"
          value="/"
        >
           รท
        </button>
      </div>
      <div>
        <button
          type="button"
          value="7"
        >
          7
        </button>
        <button
          type="button"
          value="8"
        >
          8
        </button>
        <button
          type="button"
          value="9"
        >
          9
        </button>
        <button
          class="orange"
          type="button"
          value="*"
        >
          x
        </button>
      </div>
      <div>
        <button
          type="button"
          value="4"
        >
          4
        </button>
        <button
          type="button"
          value="5"
        >
          5
        </button>
        <button
          type="button"
          value="6"
        >
          6
        </button>
        <button
          class="orange"
          type="button"
          value="-"
        >
          -
        </button>
      </div>
      <div>
        <button
          type="button"
          value="1"
        >
          1
        </button>
        <button
          type="button"
          value="2"
        >
          2
        </button>
        <button
          type="button"
          value="3"
        >
          3
        </button>
        <button
          class="orange"
          type="button"
          value="+"
        >
          +
        </button>
      </div>
      <div>
        <button
          class="wide-button"
          type="button"
          value="0"
        >
          0
        </button>
        <button
          type="button"
          value="."
        >
          .
        </button>
        <button
          class="orange"
          type="button"
          value="="
        >
          =
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Header renders correctly Renders Header Correctly 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="nav"
      >
        <div
          class="log"
        >
          <spam
            class="nav-log"
          >
            Nav /
          </spam>
          <spam
            class="bar"
          >
            bar
          </spam>
        </div>
        <div
          class="nav-link"
        >
          <a
            href="/"
          >
            Home
          </a>
          <a
            href="/calculator"
          >
            Calculator
          </a>
          <a
            href="/quote"
          >
            Quote
          </a>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="nav"
    >
      <div
        class="log"
      >
        <spam
          class="nav-log"
        >
          Nav /
        </spam>
        <spam
          class="bar"
        >
          bar
        </spam>
      </div>
      <div
        class="nav-link"
      >
        <a
          href="/"
        >
          Home
        </a>
        <a
          href="/calculator"
        >
          Calculator
        </a>
        <a
          href="/quote"
        >
          Quote
        </a>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Home renders correctly Renders Header Correctly 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div>
        <h1>
          Welcome to our page
        </h1>
        <p>
          Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
        </p>
        <br />
        <h1>
          Welcome to our page
        </h1>
        <p>
          Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div>
      <h1>
        Welcome to our page
      </h1>
      <p>
        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
      </p>
      <br />
      <h1>
        Welcome to our page
      </h1>
      <p>
        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Quote renders correctly Renders Header Correctly 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div>
        <h3
          class="quote"
        >
          Mathimatics is not about numbers, equations, computations.or algorithmes: its about understanding. _william Paul Thurston
        </h3>
      </div>
    </div>
  </body>,
  "container": <div>
    <div>
      <h3
        class="quote"
      >
        Mathimatics is not about numbers, equations, computations.or algorithmes: its about understanding. _william Paul Thurston
      </h3>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
